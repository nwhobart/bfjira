name: Release

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    # Only run this job when PR is merged to main
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    environment:
      name: pypi
      url: https://pypi.org/p/bfjira
    permissions:
      id-token: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_ADMIN_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        
      - name: Install project
        run: poetry install --no-interaction
        
      - name: Run tests
        run: poetry run pytest --cov=bfjira --cov-report=xml
        
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true
          name: codecov-umbrella
          flags: unittests
        
      - name: Get version and check tag
        id: version
        run: |
          # Get the highest version from tags
          highest_version=$(git tag | grep '^v[0-9]' | sort -V | tail -n1 | sed 's/^v//')
          echo "Highest version from tags: $highest_version"
          
          # Use the highest version as current version
          current_version=$highest_version
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          
          # Get the PR title from the event payload
          pr_title="${{ github.event.pull_request.title }}"
          echo "PR Title: $pr_title"
          
          # Determine version bump based on PR title
          if [[ $pr_title =~ ^feat ]]; then
            # Feature PR - bump minor version
            IFS='.' read -r major minor patch <<< "$current_version"
            new_minor=$((minor + 1))
            current_version="$major.$new_minor.0"
            echo "Bumping minor version for feature"
          elif [[ $pr_title =~ ^(fix|bugfix) ]]; then
            # Fix PR - bump patch version
            IFS='.' read -r major minor patch <<< "$current_version"
            new_patch=$((patch + 1))
            current_version="$major.$minor.$new_patch"
            echo "Bumping patch version for fix"
          else
            # Default to patch version for other changes
            IFS='.' read -r major minor patch <<< "$current_version"
            new_patch=$((patch + 1))
            current_version="$major.$minor.$new_patch"
            echo "Bumping patch version for other changes"
          fi
          
          # Check if tag exists and increment accordingly
          while git tag | grep -q "v$current_version"; do
            if [[ $pr_title =~ ^feat ]]; then
              new_minor=$((minor + 1))
              current_version="$major.$new_minor.0"
            else
              new_patch=$((patch + 1))
              current_version="$major.$minor.$new_patch"
            fi
          done
          
          # Update poetry version
          poetry version $current_version
          echo "final_version=$current_version" >> $GITHUB_OUTPUT
          
      - name: Build package
        run: poetry build

      - name: Create tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          # Pull the latest changes from main to avoid non-fast-forward errors
          git pull origin main
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.version.outputs.final_version }}"
          git tag -a "v${{ steps.version.outputs.final_version }}" -m "Release v${{ steps.version.outputs.final_version }}"
          git push origin main --tags
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.final_version }}
          files: dist/*
          generate_release_notes: true
          token: ${{ secrets.REPO_ADMIN_TOKEN }}
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1 